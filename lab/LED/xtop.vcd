$date
	Mon Nov  4 14:22:21 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var wire 1 2 par_we $end
$var wire 32 3 par_out [31:0] $end
$var wire 9 4 par_addr [8:0] $end
$var reg 1 5 clk $end
$var reg 32 6 par_in [31:0] $end
$var reg 1 7 rst $end
$var integer 32 8 k [31:0] $end
$var integer 32 9 start_time [31:0] $end
$scope module uut $end
$var wire 1 5 clk $end
$var wire 32 : ext_data_to_rd [31:0] $end
$var wire 32 ; par_in [31:0] $end
$var wire 32 < par_out [31:0] $end
$var wire 1 = par_re $end
$var wire 1 2 par_we $end
$var wire 1 7 rst $end
$var wire 1 1 trap $end
$var wire 1 > regf_sel $end
$var wire 32 ? regf_data_to_rd [31:0] $end
$var wire 9 @ pc [8:0] $end
$var wire 9 A par_addr [8:0] $end
$var wire 1 B mem_sel $end
$var wire 32 C mem_data_to_rd [31:0] $end
$var wire 1 D led_sel $end
$var wire 1 E led $end
$var wire 32 F instruction [31:0] $end
$var wire 1 G ext_sel $end
$var wire 1 H data_we $end
$var wire 32 I data_to_wr [31:0] $end
$var wire 32 J data_to_rd [31:0] $end
$var wire 1 K data_sel $end
$var wire 10 L data_addr [9:0] $end
$var wire 1 M cprt_sel $end
$scope module addr_decoder $end
$var wire 32 N ext_data_to_rd [31:0] $end
$var wire 1 K sel $end
$var wire 32 O regf_data_to_rd [31:0] $end
$var wire 32 P mem_data_to_rd [31:0] $end
$var wire 10 Q addr [9:0] $end
$var reg 1 M cprt_sel $end
$var reg 32 R data_to_rd [31:0] $end
$var reg 1 G ext_sel $end
$var reg 1 D led_sel $end
$var reg 1 B mem_sel $end
$var reg 1 > regf_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 S alu_arith_ops $end
$var wire 1 T alu_imm_ops $end
$var wire 1 U alu_logic_ops $end
$var wire 1 V alu_mem_ops $end
$var wire 1 W alu_ops $end
$var wire 32 X and_res [31:0] $end
$var wire 1 Y branch_ops $end
$var wire 1 5 clk $end
$var wire 1 Z imm_ops $end
$var wire 1 [ load_imm_ops $end
$var wire 1 \ load_mem_ops $end
$var wire 1 ] load_ops $end
$var wire 32 ^ mem_data_from [31:0] $end
$var wire 32 _ mem_data_to [31:0] $end
$var wire 1 K mem_sel $end
$var wire 1 H mem_we $end
$var wire 1 7 rst $end
$var wire 1 ` store_mem_ops $end
$var wire 32 a xor_res [31:0] $end
$var wire 4 b opcode [3:0] $end
$var wire 32 c instruction [31:0] $end
$var wire 32 d imm [31:0] $end
$var reg 32 e adder_res [31:0] $end
$var reg 1 f alu_carry $end
$var reg 1 g alu_negative $end
$var reg 1 h alu_overflow $end
$var reg 32 i alu_result [31:0] $end
$var reg 1 j carry_res_n $end
$var reg 32 k carry_res_n_1 [31:0] $end
$var reg 10 l mem_addr [9:0] $end
$var reg 32 m operand [31:0] $end
$var reg 9 n pc [8:0] $end
$var reg 32 o regA [31:0] $end
$var reg 32 p regB [31:0] $end
$var reg 3 q regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 5 clk $end
$var wire 8 r data_in [7:0] $end
$var wire 1 s sel $end
$upscope $end
$scope module led1 $end
$var wire 1 5 clk $end
$var wire 1 t data_in $end
$var wire 1 7 reset $end
$var wire 1 D sel $end
$var reg 1 E led $end
$upscope $end
$scope module ram $end
$var wire 1 5 clk $end
$var wire 9 u data_addr [8:0] $end
$var wire 9 v data_addr_int [8:0] $end
$var wire 1 w data_en_int $end
$var wire 32 x data_in [31:0] $end
$var wire 32 y data_in_int [31:0] $end
$var wire 32 z data_out [31:0] $end
$var wire 1 B data_sel $end
$var wire 1 H data_we $end
$var wire 1 { data_we_int $end
$var wire 1 | instr_en $end
$var wire 9 } pc [8:0] $end
$var reg 32 ~ data_out_int [31:0] $end
$var reg 32 !" instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 "" addr [3:0] $end
$var wire 1 5 clk $end
$var wire 32 #" data_in [31:0] $end
$var wire 1 > sel $end
$var wire 1 H we $end
$var wire 32 $" data_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
1|
x{
bx z
bx y
bx x
xw
bx v
bx u
xt
xs
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
xj
bx i
xh
xg
xf
bx e
bx d
bx c
bx b
bx a
x`
bx _
bx ^
x]
x\
x[
xZ
xY
bx X
xW
xV
xU
xT
xS
bx R
bx Q
bx P
bx O
bx N
xM
bx L
xK
bx J
bx I
xH
xG
bx F
xE
xD
bx C
xB
bx A
bx @
bx ?
x>
x=
bx <
bx ;
bx :
bx 9
bx 8
07
bx 6
15
bx 4
bx 3
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
05
#10000
15
#11000
0h
0g
0f
b0 i
b0 e
0j
b0 k
b0 a
b0 X
b0 r
0t
b0 m
b0 @
b0 n
b0 }
b0 y
b0 3
b0 <
b0 I
b0 _
b0 x
b0 #"
b0 o
b0 p
b0 q
0E
17
#15000
05
#20000
0K
0=
b0 ?
b0 O
b0 $"
b0 J
b0 R
b0 ^
b1 e
b1 k
b1 a
b1 ""
b1 v
b1 u
b1 4
b1 A
01
0G
0M
0>
0w
0B
b1 m
b1 L
b1 Q
b1 l
0V
0W
0s
02
1]
1Z
b1 d
0Y
0U
0S
0T
0{
0H
0`
0\
1[
b110 b
b1100000000000000000000000000001 F
b1100000000000000000000000000001 c
b1100000000000000000000000000001 !"
15
#21000
b10000 8
b10101 9
07
#25000
05
#30000
b10 e
b10 k
b0 a
b1 X
b1 r
1t
b1 @
b1 n
b1 }
b1 y
b1 3
b1 <
b1 I
b1 _
b1 x
b1 #"
b1 o
15
#35000
05
#40000
1K
b1 e
b1 k
b1 a
b0 X
b1000 ""
b1011000 v
b1011000 u
b1011000 4
b1011000 A
1D
b0 m
b1001011000 L
b1001011000 Q
b1001011000 l
0]
0Z
b1001011000 d
1{
1H
1`
0[
b1001 b
b10 @
b10 n
b10 }
b10010000000000000000001001011000 F
b10010000000000000000001001011000 c
b10010000000000000000001001011000 !"
15
#45000
05
#50000
0K
b0 J
b0 R
b0 ^
b110110 e
b110110 k
b110100 a
b1 X
b101 ""
b110101 v
b110101 u
b110101 4
b110101 A
0w
0B
b110101 m
b110101 L
b110101 Q
b110101 l
1]
1Z
b110101 d
0{
0H
0`
1[
b110 b
b11 @
b11 n
b11 }
1E
b1100000000000000000000000110101 F
b1100000000000000000000000110101 c
b1100000000000000000000000110101 !"
15
#55000
05
#60000
11
1K
b1111 ""
b111111111 v
b111111111 u
b111111111 4
b111111111 A
b0 m
b1111111111 L
b1111111111 Q
b1111111111 l
0]
0Z
b111111111111111 d
1{
1H
1`
0[
b110101 e
b110101 k
b110101 a
b0 X
b110101 r
b1001 b
b110101 y
b110101 3
b110101 <
b110101 I
b110101 _
b110101 x
b110101 #"
b110101 o
b100 @
b100 n
b100 }
b10010000000000000111111111111111 F
b10010000000000000111111111111111 c
b10010000000000000111111111111111 !"
15
#65000
05
#70000
0K
b0 J
b0 R
b0 ^
b0 ""
b0 v
b0 u
b0 4
b0 A
0w
0B
01
b110101 i
1W
b0 L
b0 Q
b0 l
1S
1Z
b0 d
1T
0{
0H
0`
b0 b
b101 @
b101 n
b101 }
b0 F
b0 c
b0 !"
15
