$date
	Mon Nov 11 16:45:29 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module xtop_tb $end
$var wire 32 ! r0 [31:0] $end
$var wire 32 " r1 [31:0] $end
$var wire 32 # r10 [31:0] $end
$var wire 32 $ r11 [31:0] $end
$var wire 32 % r12 [31:0] $end
$var wire 32 & r13 [31:0] $end
$var wire 32 ' r14 [31:0] $end
$var wire 32 ( r15 [31:0] $end
$var wire 32 ) r2 [31:0] $end
$var wire 32 * r3 [31:0] $end
$var wire 32 + r4 [31:0] $end
$var wire 32 , r5 [31:0] $end
$var wire 32 - r6 [31:0] $end
$var wire 32 . r7 [31:0] $end
$var wire 32 / r8 [31:0] $end
$var wire 32 0 r9 [31:0] $end
$var wire 1 1 trap $end
$var wire 1 2 led0 $end
$var reg 1 3 clk $end
$var reg 1 4 rst $end
$var reg 1 5 sw0 $end
$var integer 32 6 k [31:0] $end
$var integer 32 7 start_time [31:0] $end
$scope module uut $end
$var wire 1 3 clk $end
$var wire 1 4 rst $end
$var wire 1 5 sw0 $end
$var wire 1 1 trap $end
$var wire 1 8 sw0_status $end
$var wire 1 9 sw0_sel $end
$var wire 1 : regf_sel $end
$var wire 32 ; regf_data_to_rd [31:0] $end
$var wire 9 < pc [8:0] $end
$var wire 1 = mem_sel $end
$var wire 32 > mem_data_to_rd [31:0] $end
$var wire 1 ? led0_sel $end
$var wire 1 2 led0 $end
$var wire 32 @ instruction [31:0] $end
$var wire 1 A data_we $end
$var wire 32 B data_to_wr [31:0] $end
$var wire 32 C data_to_rd [31:0] $end
$var wire 1 D data_sel $end
$var wire 10 E data_addr [9:0] $end
$var wire 1 F cprt_sel $end
$scope module addr_decoder $end
$var wire 1 D sel $end
$var wire 32 G regf_data_to_rd [31:0] $end
$var wire 32 H mem_data_to_rd [31:0] $end
$var wire 10 I addr [9:0] $end
$var reg 1 F cprt_sel $end
$var reg 32 J data_to_rd [31:0] $end
$var reg 1 ? led0_sel $end
$var reg 1 = mem_sel $end
$var reg 1 : regf_sel $end
$var reg 1 9 sw0_sel $end
$var reg 1 1 trap_sel $end
$upscope $end
$scope module controller $end
$var wire 1 K alu_arith_ops $end
$var wire 1 L alu_imm_ops $end
$var wire 1 M alu_logic_ops $end
$var wire 1 N alu_mem_ops $end
$var wire 1 O alu_ops $end
$var wire 32 P and_res [31:0] $end
$var wire 1 Q branch_ops $end
$var wire 1 3 clk $end
$var wire 1 R imm_ops $end
$var wire 1 S load_imm_ops $end
$var wire 1 T load_mem_ops $end
$var wire 1 U load_ops $end
$var wire 32 V mem_data_from [31:0] $end
$var wire 32 W mem_data_to [31:0] $end
$var wire 1 D mem_sel $end
$var wire 1 A mem_we $end
$var wire 1 4 rst $end
$var wire 1 X store_mem_ops $end
$var wire 32 Y xor_res [31:0] $end
$var wire 4 Z opcode [3:0] $end
$var wire 32 [ instruction [31:0] $end
$var wire 32 \ imm [31:0] $end
$var reg 32 ] adder_res [31:0] $end
$var reg 1 ^ alu_carry $end
$var reg 1 _ alu_negative $end
$var reg 1 ` alu_overflow $end
$var reg 32 a alu_result [31:0] $end
$var reg 1 b carry_res_n $end
$var reg 32 c carry_res_n_1 [31:0] $end
$var reg 10 d mem_addr [9:0] $end
$var reg 32 e operand [31:0] $end
$var reg 9 f pc [8:0] $end
$var reg 32 g regA [31:0] $end
$var reg 32 h regB [31:0] $end
$var reg 3 i regC [2:0] $end
$upscope $end
$scope module cprint $end
$var wire 1 3 clk $end
$var wire 8 j data_in [7:0] $end
$var wire 1 k sel $end
$upscope $end
$scope module led00 $end
$var wire 1 3 clk $end
$var wire 1 ? led0_sel $end
$var wire 1 4 reset $end
$var wire 1 8 sw0_status $end
$var reg 1 2 led0 $end
$upscope $end
$scope module ram $end
$var wire 1 3 clk $end
$var wire 9 l data_addr [8:0] $end
$var wire 9 m data_addr_int [8:0] $end
$var wire 1 n data_en_int $end
$var wire 32 o data_in [31:0] $end
$var wire 32 p data_in_int [31:0] $end
$var wire 32 q data_out [31:0] $end
$var wire 1 = data_sel $end
$var wire 1 A data_we $end
$var wire 1 r data_we_int $end
$var wire 1 s instr_en $end
$var wire 9 t pc [8:0] $end
$var reg 32 u data_out_int [31:0] $end
$var reg 32 v instruction [31:0] $end
$upscope $end
$scope module regf $end
$var wire 4 w addr [3:0] $end
$var wire 1 3 clk $end
$var wire 32 x data_in [31:0] $end
$var wire 1 : sel $end
$var wire 1 A we $end
$var wire 32 y data_out [31:0] $end
$upscope $end
$scope module sw00 $end
$var wire 1 3 clk $end
$var wire 1 4 reset $end
$var wire 1 5 sw0 $end
$var wire 1 9 sw0_sel $end
$var reg 1 8 sw0_status $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx y
bx x
bx w
bx v
bx u
bx t
1s
xr
bx q
bx p
bx o
xn
bx m
bx l
xk
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
xb
bx a
x`
x_
x^
bx ]
bx \
bx [
bx Z
bx Y
xX
bx W
bx V
xU
xT
xS
xR
xQ
bx P
xO
xN
xM
xL
xK
bx J
bx I
bx H
bx G
xF
bx E
xD
bx C
bx B
xA
bx @
x?
bx >
x=
bx <
bx ;
x:
x9
x8
bx 7
bx 6
15
04
13
x2
x1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#5000
03
#10000
13
#11000
0`
0_
0^
b0 a
b0 ]
0b
b0 c
b0 Y
b0 P
b0 j
b0 e
b0 <
b0 f
b0 t
b0 p
b0 B
b0 W
b0 o
b0 x
b0 g
b0 h
b0 i
02
14
#15000
03
#20000
0D
b0 ;
b0 G
b0 y
b0 C
b0 J
b0 V
b1 ]
b1 c
b1 Y
b1 w
b1 m
b1 l
01
0F
0:
0n
0=
0?
09
b1 e
b1 E
b1 I
b1 d
0N
0O
0k
1U
1R
b1 \
0Q
0M
0K
0L
0r
0A
0X
0T
1S
b110 Z
b1100000000000000000000000000001 @
b1100000000000000000000000000001 [
b1100000000000000000000000000001 v
13
#21000
b10000 6
b10101 7
04
#25000
03
#30000
b10 ]
b10 c
b0 Y
b1 P
b1 j
b1 <
b1 f
b1 t
b1 p
b1 B
b1 W
b1 o
b1 x
b1 g
13
#35000
03
#40000
19
1D
b1 ]
b1 c
b1 Y
b0 P
b110 w
b11000110 m
b11000110 l
b0 e
b1011000110 E
b1011000110 I
b1011000110 d
0U
0R
b1011000110 \
1r
1A
1X
0S
b1001 Z
b10 <
b10 f
b10 t
b10010000000000000000001011000110 @
b10010000000000000000001011000110 [
b10010000000000000000001011000110 v
13
#45000
03
#50000
0D
b0 C
b0 J
b0 V
b0 w
b0 m
b0 l
0n
0=
09
b0 E
b0 I
b0 d
1U
1R
b0 \
0r
0A
0X
1S
b110 Z
b11 <
b11 f
b11 t
18
b1100000000000000000000000000000 @
b1100000000000000000000000000000 [
b1100000000000000000000000000000 v
13
#55000
03
#60000
b1 w
b1 m
b1 l
b1 e
b1 E
b1 I
b1 d
b1 \
b1 ]
b1 c
b1 Y
b0 j
b0 p
b0 B
b0 W
b0 o
b0 x
b0 g
b100 <
b100 f
b100 t
b1100000000000000000000000000001 @
b1100000000000000000000000000001 [
b1100000000000000000000000000001 v
13
#65000
03
#70000
1?
1D
b1100 w
b10111100 m
b10111100 l
b0 e
b1010111100 E
b1010111100 I
b1010111100 d
0U
0R
b1010111100 \
1r
1A
1X
0S
b1 ]
b1 c
b1 Y
b0 P
b1 j
b1001 Z
b101 <
b101 f
b101 t
b1 p
b1 B
b1 W
b1 o
b1 x
b1 g
b10010000000000000000001010111100 @
b10010000000000000000001010111100 [
b10010000000000000000001010111100 v
13
#75000
03
#80000
0D
b0 C
b0 J
b0 V
b0 w
b0 m
b0 l
0n
0=
0?
b0 E
b0 I
b0 d
1U
1R
b0 \
0r
0A
0X
1S
b110 Z
12
b110 <
b110 f
b110 t
b1100000000000000000000000000000 @
b1100000000000000000000000000000 [
b1100000000000000000000000000000 v
13
#85000
03
#90000
b101 w
b110101 m
b110101 l
b110101 e
b110101 E
b110101 I
b110101 d
b110101 \
b110101 ]
b110101 c
b110101 Y
b0 j
b111 <
b111 f
b111 t
b0 p
b0 B
b0 W
b0 o
b0 x
b0 g
b1100000000000000000000000110101 @
b1100000000000000000000000110101 [
b1100000000000000000000000110101 v
13
#95000
03
#100000
11
1D
b1111 w
b111111111 m
b111111111 l
b0 e
b1111111111 E
b1111111111 I
b1111111111 d
0U
0R
b111111111111111 \
1r
1A
1X
0S
b110101 ]
b110101 c
b110101 Y
b0 P
b110101 j
b1001 Z
b110101 p
b110101 B
b110101 W
b110101 o
b110101 x
b110101 g
b1000 <
b1000 f
b1000 t
b10010000000000000111111111111111 @
b10010000000000000111111111111111 [
b10010000000000000111111111111111 v
13
#105000
03
#110000
0D
b0 C
b0 J
b0 V
b0 w
b0 m
b0 l
0n
0=
01
b0 E
b0 I
b0 d
1U
1R
b0 \
0r
0A
0X
1S
b110 Z
b1001 <
b1001 f
b1001 t
b1100000000000000000000000000000 @
b1100000000000000000000000000000 [
b1100000000000000000000000000000 v
13
