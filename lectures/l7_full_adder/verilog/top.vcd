$date
	Thu Oct 10 20:01:34 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module fulladder4_tb $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " co $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % ci $end
$scope module zica $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % ci $end
$var wire 4 ( sum [3:0] $end
$var wire 1 " co $end
$var wire 1 ) aux3 $end
$var wire 1 * aux2 $end
$var wire 1 + aux1 $end
$scope module adder0 $end
$var wire 1 , a $end
$var wire 1 - b $end
$var wire 1 % ci $end
$var wire 1 + co $end
$var wire 1 . out_and1 $end
$var wire 1 / out_and2 $end
$var wire 1 0 out_xor $end
$var wire 1 1 sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 2 a $end
$var wire 1 3 b $end
$var wire 1 + ci $end
$var wire 1 * co $end
$var wire 1 4 out_and1 $end
$var wire 1 5 out_and2 $end
$var wire 1 6 out_xor $end
$var wire 1 7 sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 8 a $end
$var wire 1 9 b $end
$var wire 1 * ci $end
$var wire 1 ) co $end
$var wire 1 : out_and1 $end
$var wire 1 ; out_and2 $end
$var wire 1 < out_xor $end
$var wire 1 = sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 > a $end
$var wire 1 ? b $end
$var wire 1 ) ci $end
$var wire 1 " co $end
$var wire 1 @ out_and1 $end
$var wire 1 A out_and2 $end
$var wire 1 B out_xor $end
$var wire 1 C sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
17
06
05
04
03
02
01
00
1/
0.
1-
1,
1+
0*
0)
b10 (
b1 '
b1 &
0%
b1 $
b1 #
0"
b10 !
$end
