$date
	Mon Jan  6 10:58:35 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module add_shft_mul_tb $end
$var wire 1 ! done $end
$var wire 8 " c [7:0] $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % clk $end
$var reg 1 & rst $end
$var reg 1 ' start $end
$scope module mult0 $end
$var wire 4 ( a [3:0] $end
$var wire 4 ) b [3:0] $end
$var wire 1 % clk $end
$var wire 1 & rst $end
$var wire 1 ' start $end
$var wire 4 * second_nr_aux [3:0] $end
$var wire 8 + resulty [7:0] $end
$var wire 4 , first_nr_aux [3:0] $end
$var wire 1 ! done $end
$var wire 1 - complement1_finish_nr1 $end
$var reg 8 . aux_sumy_v2 [7:0] $end
$var reg 8 / c [7:0] $end
$var reg 1 0 complement_result_sel $end
$var reg 4 1 counter [3:0] $end
$scope module comple2 $end
$var wire 1 2 ci $end
$var wire 1 % clk $end
$var wire 1 3 complement1_sel $end
$var wire 4 4 dumb_0 [3:0] $end
$var wire 4 5 first_nr_reg [3:0] $end
$var wire 1 & rst $end
$var wire 4 6 second_nr_reg [3:0] $end
$var wire 4 7 second_nr_aux [3:0] $end
$var wire 4 8 first_nr_aux [3:0] $end
$var wire 1 9 complement1_finish_nr2 $end
$var wire 1 : complement1_finish_nr1 $end
$var reg 1 ; complement1_finish $end
$var reg 4 < first_nr [3:0] $end
$var reg 4 = second_nr [3:0] $end
$scope module complement_first_nr $end
$var wire 4 > a [3:0] $end
$var wire 4 ? a_xor [3:0] $end
$var wire 4 @ aux_xor [3:0] $end
$var wire 4 A b [3:0] $end
$var wire 1 2 ci $end
$var wire 1 % clk $end
$var wire 1 B co $end
$var wire 1 3 complement1_sel $end
$var wire 4 C dumby [3:0] $end
$var wire 1 & rst $end
$var wire 4 D sum_aux_v2 [3:0] $end
$var wire 4 E sum_aux [3:0] $end
$var wire 1 F aux3 $end
$var wire 1 G aux2 $end
$var wire 1 H aux1 $end
$var reg 1 : complement1_finish $end
$var reg 4 I sum [3:0] $end
$scope module adder0 $end
$var wire 1 J a $end
$var wire 1 K b $end
$var wire 1 2 ci $end
$var wire 1 % clk $end
$var wire 1 H co $end
$var wire 1 L out_and1 $end
$var wire 1 M out_and2 $end
$var wire 1 N out_xor $end
$var wire 1 & rst $end
$var wire 1 O sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 H ci $end
$var wire 1 % clk $end
$var wire 1 G co $end
$var wire 1 R out_and1 $end
$var wire 1 S out_and2 $end
$var wire 1 T out_xor $end
$var wire 1 & rst $end
$var wire 1 U sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 V a $end
$var wire 1 W b $end
$var wire 1 G ci $end
$var wire 1 % clk $end
$var wire 1 F co $end
$var wire 1 X out_and1 $end
$var wire 1 Y out_and2 $end
$var wire 1 Z out_xor $end
$var wire 1 & rst $end
$var wire 1 [ sum $end
$upscope $end
$upscope $end
$scope module complement_second_nr $end
$var wire 4 \ a [3:0] $end
$var wire 4 ] a_xor [3:0] $end
$var wire 4 ^ aux_xor [3:0] $end
$var wire 4 _ b [3:0] $end
$var wire 1 2 ci $end
$var wire 1 % clk $end
$var wire 1 ` co $end
$var wire 1 3 complement1_sel $end
$var wire 4 a dumby [3:0] $end
$var wire 1 & rst $end
$var wire 4 b sum_aux_v2 [3:0] $end
$var wire 4 c sum_aux [3:0] $end
$var wire 1 d aux3 $end
$var wire 1 e aux2 $end
$var wire 1 f aux1 $end
$var reg 1 9 complement1_finish $end
$var reg 4 g sum [3:0] $end
$scope module adder0 $end
$var wire 1 h a $end
$var wire 1 i b $end
$var wire 1 2 ci $end
$var wire 1 % clk $end
$var wire 1 f co $end
$var wire 1 j out_and1 $end
$var wire 1 k out_and2 $end
$var wire 1 l out_xor $end
$var wire 1 & rst $end
$var wire 1 m sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 n a $end
$var wire 1 o b $end
$var wire 1 f ci $end
$var wire 1 % clk $end
$var wire 1 e co $end
$var wire 1 p out_and1 $end
$var wire 1 q out_and2 $end
$var wire 1 r out_xor $end
$var wire 1 & rst $end
$var wire 1 s sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 t a $end
$var wire 1 u b $end
$var wire 1 e ci $end
$var wire 1 % clk $end
$var wire 1 d co $end
$var wire 1 v out_and1 $end
$var wire 1 w out_and2 $end
$var wire 1 x out_xor $end
$var wire 1 & rst $end
$var wire 1 y sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module complement_result $end
$var wire 8 z a [7:0] $end
$var wire 8 { a_xor [7:0] $end
$var wire 8 | aux_xor [7:0] $end
$var wire 8 } b [7:0] $end
$var wire 1 ~ ci $end
$var wire 1 % clk $end
$var wire 1 !" co $end
$var wire 1 0 complement1_sel $end
$var wire 8 "" dumby [7:0] $end
$var wire 1 & rst $end
$var wire 8 #" sum_aux [7:0] $end
$var wire 1 $" aux8 $end
$var wire 1 %" aux7 $end
$var wire 1 &" aux6 $end
$var wire 1 '" aux5 $end
$var wire 1 (" aux4 $end
$var wire 1 )" aux3 $end
$var wire 1 *" aux2 $end
$var wire 1 +" aux1 $end
$var reg 1 - complement1_finish $end
$var reg 8 ," sum [7:0] $end
$scope module adder0 $end
$var wire 1 -" a $end
$var wire 1 ." b $end
$var wire 1 ~ ci $end
$var wire 1 % clk $end
$var wire 1 +" co $end
$var wire 1 /" out_and1 $end
$var wire 1 0" out_and2 $end
$var wire 1 1" out_xor $end
$var wire 1 & rst $end
$var wire 1 2" sum $end
$upscope $end
$scope module adder1 $end
$var wire 1 3" a $end
$var wire 1 4" b $end
$var wire 1 +" ci $end
$var wire 1 % clk $end
$var wire 1 *" co $end
$var wire 1 5" out_and1 $end
$var wire 1 6" out_and2 $end
$var wire 1 7" out_xor $end
$var wire 1 & rst $end
$var wire 1 8" sum $end
$upscope $end
$scope module adder2 $end
$var wire 1 9" a $end
$var wire 1 :" b $end
$var wire 1 *" ci $end
$var wire 1 % clk $end
$var wire 1 )" co $end
$var wire 1 ;" out_and1 $end
$var wire 1 <" out_and2 $end
$var wire 1 =" out_xor $end
$var wire 1 & rst $end
$var wire 1 >" sum $end
$upscope $end
$scope module adder3 $end
$var wire 1 ?" a $end
$var wire 1 @" b $end
$var wire 1 )" ci $end
$var wire 1 % clk $end
$var wire 1 (" co $end
$var wire 1 A" out_and1 $end
$var wire 1 B" out_and2 $end
$var wire 1 C" out_xor $end
$var wire 1 & rst $end
$var wire 1 D" sum $end
$upscope $end
$scope module adder4 $end
$var wire 1 E" a $end
$var wire 1 F" b $end
$var wire 1 (" ci $end
$var wire 1 % clk $end
$var wire 1 '" co $end
$var wire 1 G" out_and1 $end
$var wire 1 H" out_and2 $end
$var wire 1 I" out_xor $end
$var wire 1 & rst $end
$var wire 1 J" sum $end
$upscope $end
$scope module adder5 $end
$var wire 1 K" a $end
$var wire 1 L" b $end
$var wire 1 '" ci $end
$var wire 1 % clk $end
$var wire 1 &" co $end
$var wire 1 M" out_and1 $end
$var wire 1 N" out_and2 $end
$var wire 1 O" out_xor $end
$var wire 1 & rst $end
$var wire 1 P" sum $end
$upscope $end
$scope module adder6 $end
$var wire 1 Q" a $end
$var wire 1 R" b $end
$var wire 1 &" ci $end
$var wire 1 % clk $end
$var wire 1 %" co $end
$var wire 1 S" out_and1 $end
$var wire 1 T" out_and2 $end
$var wire 1 U" out_xor $end
$var wire 1 & rst $end
$var wire 1 V" sum $end
$upscope $end
$scope module adder7 $end
$var wire 1 W" a $end
$var wire 1 X" b $end
$var wire 1 %" ci $end
$var wire 1 % clk $end
$var wire 1 $" co $end
$var wire 1 Y" out_and1 $end
$var wire 1 Z" out_and2 $end
$var wire 1 [" out_xor $end
$var wire 1 & rst $end
$var wire 1 \" sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0\"
1["
0Z"
1Y"
0X"
1W"
0V"
1U"
0T"
1S"
0R"
1Q"
0P"
1O"
0N"
1M"
0L"
1K"
0J"
1I"
0H"
1G"
0F"
1E"
0D"
1C"
0B"
1A"
0@"
1?"
0>"
1="
0<"
1;"
0:"
19"
08"
17"
06"
15"
04"
13"
02"
11"
00"
1/"
0."
1-"
b0 ,"
1+"
1*"
1)"
1("
1'"
1&"
1%"
1$"
b0 #"
b0 ""
z!"
1~
b0 }
b11111111 |
b11111111 {
b0 z
0y
0x
0w
0v
0u
0t
1s
0r
0q
0p
0o
0n
0m
1l
0k
1j
0i
1h
b0xxx g
1f
0e
0d
bz010 c
b10 b
b0 a
z`
b0 _
b1111 ^
b1 ]
b1110 \
1[
1Z
0Y
0X
0W
1V
1U
0T
0S
0R
0Q
0P
0O
1N
0M
1L
0K
1J
b10 I
1H
0G
0F
bz110 E
b110 D
b0 C
zB
b0 A
b1111 @
b1101 ?
b10 >
bx =
bx <
x;
1:
19
b10 8
b0xxx 7
b1110 6
b10 5
b0 4
13
12
b100 1
x0
bx /
b0 .
0-
bx ,
b0 +
bx *
b1110 )
b10 (
0'
1&
1%
b1110 $
b10 #
bx "
0!
$end
#10000
0%
#20000
b0xxx *
b0xxx =
b10 ,
b10 <
1;
19
b10 7
b10 g
1:
b10 8
b10 I
1%
#21000
0&
#30000
0%
#40000
b10 *
b10 =
1!
b101 1
1%
#41000
1'
#50000
0%
#60000
b0 "
b0 /
0!
b0 1
1%
#61000
0'
#70000
0%
#80000
b1 1
10
1%
#90000
0%
#100000
0$"
0Y"
1\"
0%"
0S"
1V"
0&"
0M"
1P"
0'"
0G"
b11110000 #"
1J"
0I"
0E"
b11101111 {
1-
b10000 .
b10000 z
b10 1
1%
#110000
0%
#120000
0$"
0Y"
1\"
0%"
0S"
1V"
0&"
0M"
1P"
0("
0'"
0A"
1D"
0G"
b11111000 #"
1J"
0C"
1I"
0?"
1E"
b11110111 {
b11110000 +
b11110000 ,"
b11 1
b1000 .
b1000 z
1%
#130000
0%
#140000
0$"
0Y"
1\"
0%"
0S"
1V"
0&"
0M"
1P"
0'"
0G"
1J"
0)"
0("
0;"
1>"
0A"
b11111100 #"
1D"
0="
1C"
09"
1?"
b11111011 {
b11111000 +
b11111000 ,"
b100 .
b100 z
b100 1
1%
#150000
0%
#160000
b11111100 +
b11111100 ,"
1!
b101 1
1%
#170000
0%
#180000
b11111100 "
b11111100 /
0!
b110 1
1%
